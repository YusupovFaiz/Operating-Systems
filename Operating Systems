from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional, Union, Sequence, TypeVar
from dataclasses import dataclass
import pytest
from fastapi.testclient import TestClient

# ========== Реализация бизнес-логики ==========

T = TypeVar('T')

def calculate_factorials(n: int) -> List[int]:
    """Вычисляет первые n факториалов"""
    if not isinstance(n, int) or n < 1:
        raise ValueError("n must be a positive integer")
    result = []
    fact = 1
    for i in range(1, n+1):
        fact *= i
        result.append(fact)
    return result

def remove_duplicates(items: Sequence[T]) -> List[T]:
    """Удаляет дубликаты с сохранением порядка"""
    seen = set()
    return [x for x in items if not (x in seen or seen.add(x))]

@dataclass
class ListNode:
    value: T
    next: Optional['ListNode'] = None

def reverse_linked_list(head: Optional[ListNode]) -> Optional[ListNode]:
    """Разворачивает связный список с помощью рекурсии"""
    if head is None:
        return None
    
    def _reverse(current: ListNode, prev: Optional[ListNode] = None) -> ListNode:
        if current.next is None:
            current.next = prev
            return current
        next_node = current.next
        current.next = prev
        return _reverse(next_node, current)
    
    return _reverse(head)

# ========== REST API реализация ==========

app = FastAPI()

class FactorialRequest(BaseModel):
    n: int

class RemoveDuplicatesRequest(BaseModel):
    items: List[Union[int, float, str]]

class LinkedListRequest(BaseModel):
    items: List[Union[int, float, str]]

@app.post("/factorials")
async def get_factorials(request: FactorialRequest):
    try:
        return {"result": calculate_factorials(request.n)}
    except ValueError as e:
        raise HTTPException(400, detail=str(e))

@app.post("/remove-duplicates")
async def remove_duplicates_api(request: RemoveDuplicatesRequest):
    return {"result": remove_duplicates(request.items)}

@app.post("/reverse-linked-list")
async def reverse_linked_list_api(request: LinkedListRequest):
    
    head = None
    current = None
    for item in request.items:
        node = ListNode(item)
        if head is None:
            head = node
            current = node
        else:
            current.next = node
            current = node

    reversed_head = reverse_linked_list(head)

    result = []
    node = reversed_head
    while node is not None:
        result.append(node.value)
        node = node.next
    
    return {"result": result}

# ========== Unit тесты ==========

def test_factorials():
    assert calculate_factorials(5) == [1, 2, 6, 24, 120]
    assert calculate_factorials(1) == [1]
    try:
        calculate_factorials(-1)
        assert False
    except ValueError:
        pass

def test_remove_duplicates():
    assert remove_duplicates([1,2,2,3,1]) == [1,2,3]
    assert remove_duplicates([]) == []
    assert remove_duplicates(["a", "b", "a"]) == ["a", "b"]

def test_reverse_linked_list():
    # 1->2->3
    node3 = ListNode(3)
    node2 = ListNode(2, node3)
    node1 = ListNode(1, node2)
    
    # 3->2->1
    reversed_head = reverse_linked_list(node1)
    assert reversed_head.value == 3
    assert reversed_head.next.value == 2
    assert reversed_head.next.next.value == 1
    assert reverse_linked_list(None) is None

# ========== API тесты ==========

client = TestClient(app)

def test_api_factorials():
    response = client.post("/factorials", json={"n": 5})
    assert response.status_code == 200
    assert response.json() == {"result": [1, 2, 6, 24, 120]}

def test_api_remove_duplicates():
    response = client.post("/remove-duplicates", json={"items": [1,2,2,3]})
    assert response.status_code == 200
    assert response.json() == {"result": [1,2,3]}

def test_api_reverse_linked_list():
    response = client.post("/reverse-linked-list", json={"items": [1,2,3]})
    assert response.status_code == 200
    assert response.json() == {"result": [3,2,1]}


if __name__ == "__main__":

    pytest.main([__file__])
    
    # Для запуска сервера:
    # uvicorn filename:app --reload
